// Code generated by protoc-gen-go.
// source: github.com/vjurenka/hs-proto-go/bnet/rpc_config/rpc_config.proto
// DO NOT EDIT!

/*
Package rpc_config is a generated protocol buffer package.

It is generated from these files:
	github.com/vjurenka/hs-proto-go/bnet/rpc_config/rpc_config.proto

It has these top-level messages:
	RPCMethodConfig
	RPCMeterConfig
*/
package rpc_config

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type RPCMethodConfig struct {
	ServiceName        *string  `protobuf:"bytes,1,opt,name=service_name" json:"service_name,omitempty"`
	MethodName         *string  `protobuf:"bytes,2,opt,name=method_name" json:"method_name,omitempty"`
	FixedCallCost      *uint32  `protobuf:"varint,3,opt,name=fixed_call_cost,def=1" json:"fixed_call_cost,omitempty"`
	FixedPacketSize    *uint32  `protobuf:"varint,4,opt,name=fixed_packet_size,def=0" json:"fixed_packet_size,omitempty"`
	VariableMultiplier *float32 `protobuf:"fixed32,5,opt,name=variable_multiplier,def=0" json:"variable_multiplier,omitempty"`
	Multiplier         *float32 `protobuf:"fixed32,6,opt,name=multiplier,def=1" json:"multiplier,omitempty"`
	RateLimitCount     *uint32  `protobuf:"varint,7,opt,name=rate_limit_count" json:"rate_limit_count,omitempty"`
	RateLimitSeconds   *uint32  `protobuf:"varint,8,opt,name=rate_limit_seconds" json:"rate_limit_seconds,omitempty"`
	MaxPacketSize      *uint32  `protobuf:"varint,9,opt,name=max_packet_size" json:"max_packet_size,omitempty"`
	MaxEncodedSize     *uint32  `protobuf:"varint,10,opt,name=max_encoded_size" json:"max_encoded_size,omitempty"`
	Timeout            *float32 `protobuf:"fixed32,11,opt,name=timeout" json:"timeout,omitempty"`
	XXX_unrecognized   []byte   `json:"-"`
}

func (m *RPCMethodConfig) Reset()         { *m = RPCMethodConfig{} }
func (m *RPCMethodConfig) String() string { return proto.CompactTextString(m) }
func (*RPCMethodConfig) ProtoMessage()    {}

const Default_RPCMethodConfig_FixedCallCost uint32 = 1
const Default_RPCMethodConfig_FixedPacketSize uint32 = 0
const Default_RPCMethodConfig_VariableMultiplier float32 = 0
const Default_RPCMethodConfig_Multiplier float32 = 1

func (m *RPCMethodConfig) GetServiceName() string {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return ""
}

func (m *RPCMethodConfig) GetMethodName() string {
	if m != nil && m.MethodName != nil {
		return *m.MethodName
	}
	return ""
}

func (m *RPCMethodConfig) GetFixedCallCost() uint32 {
	if m != nil && m.FixedCallCost != nil {
		return *m.FixedCallCost
	}
	return Default_RPCMethodConfig_FixedCallCost
}

func (m *RPCMethodConfig) GetFixedPacketSize() uint32 {
	if m != nil && m.FixedPacketSize != nil {
		return *m.FixedPacketSize
	}
	return Default_RPCMethodConfig_FixedPacketSize
}

func (m *RPCMethodConfig) GetVariableMultiplier() float32 {
	if m != nil && m.VariableMultiplier != nil {
		return *m.VariableMultiplier
	}
	return Default_RPCMethodConfig_VariableMultiplier
}

func (m *RPCMethodConfig) GetMultiplier() float32 {
	if m != nil && m.Multiplier != nil {
		return *m.Multiplier
	}
	return Default_RPCMethodConfig_Multiplier
}

func (m *RPCMethodConfig) GetRateLimitCount() uint32 {
	if m != nil && m.RateLimitCount != nil {
		return *m.RateLimitCount
	}
	return 0
}

func (m *RPCMethodConfig) GetRateLimitSeconds() uint32 {
	if m != nil && m.RateLimitSeconds != nil {
		return *m.RateLimitSeconds
	}
	return 0
}

func (m *RPCMethodConfig) GetMaxPacketSize() uint32 {
	if m != nil && m.MaxPacketSize != nil {
		return *m.MaxPacketSize
	}
	return 0
}

func (m *RPCMethodConfig) GetMaxEncodedSize() uint32 {
	if m != nil && m.MaxEncodedSize != nil {
		return *m.MaxEncodedSize
	}
	return 0
}

func (m *RPCMethodConfig) GetTimeout() float32 {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return 0
}

type RPCMeterConfig struct {
	Method           []*RPCMethodConfig `protobuf:"bytes,1,rep,name=method" json:"method,omitempty"`
	IncomePerSecond  *uint32            `protobuf:"varint,2,opt,name=income_per_second,def=1" json:"income_per_second,omitempty"`
	InitialBalance   *uint32            `protobuf:"varint,3,opt,name=initial_balance" json:"initial_balance,omitempty"`
	CapBalance       *uint32            `protobuf:"varint,4,opt,name=cap_balance" json:"cap_balance,omitempty"`
	StartupPeriod    *float32           `protobuf:"fixed32,5,opt,name=startup_period,def=0" json:"startup_period,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *RPCMeterConfig) Reset()         { *m = RPCMeterConfig{} }
func (m *RPCMeterConfig) String() string { return proto.CompactTextString(m) }
func (*RPCMeterConfig) ProtoMessage()    {}

const Default_RPCMeterConfig_IncomePerSecond uint32 = 1
const Default_RPCMeterConfig_StartupPeriod float32 = 0

func (m *RPCMeterConfig) GetMethod() []*RPCMethodConfig {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *RPCMeterConfig) GetIncomePerSecond() uint32 {
	if m != nil && m.IncomePerSecond != nil {
		return *m.IncomePerSecond
	}
	return Default_RPCMeterConfig_IncomePerSecond
}

func (m *RPCMeterConfig) GetInitialBalance() uint32 {
	if m != nil && m.InitialBalance != nil {
		return *m.InitialBalance
	}
	return 0
}

func (m *RPCMeterConfig) GetCapBalance() uint32 {
	if m != nil && m.CapBalance != nil {
		return *m.CapBalance
	}
	return 0
}

func (m *RPCMeterConfig) GetStartupPeriod() float32 {
	if m != nil && m.StartupPeriod != nil {
		return *m.StartupPeriod
	}
	return Default_RPCMeterConfig_StartupPeriod
}
